{"pageProps":{"id":"tensor","data":"## <span>Class</span> Tensor\n\n###### Description\n\nN Dimensional data view, that helps create, store, manipulate data.\n\n###### Params\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**dtype**|<var>string</var>|the data type for tensor instance|\n|**shape**|<var>Array.\\<number></var>|the list of integers,|\n|**data?**|<var>TypedArray \\| Array</var>|initial data to store|\n|**stride?**|<var>Array.\\<number></var>|custom mapping from plain to NDArray|\n|**offset?**|<var>number</var>|number of data elements to skip|\n\n###### Methods\n\n#### get (...x) <span>=> number</span>\n\nGet data element by coordinates\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**x**|<var>number</var>|coordinates<br /><br />Require N number arguments, where n - dimention of a tensor.|\n\n```js\nconst t = new gm.Tensor('uint8', [2, 3], new Uint8Array([1, 2, 3, 4, 5, 6]));\nt.get(0, 0); // 1\nt.get(0, 1); // 2\nt.get(1, 2); // 6\n```\n\n#### set (...x, v) <span>=> void</span>\n\nPut value to tensor by coordinates\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**x**|<var>number</var>|coordinates|\n|**v**|<var>number</var>|value|\n\n```js\nconst t = new gm.Tensor('uint8', [2, 3], new Uint8Array([1, 2, 3, 4, 5, 6]));\nt.set(0, 0, 10); // 1\nt.set(0, 1, 15); // 2\nt.set(1, 2, 20); // 6\n\nconsole.log(t.data); // <Uint8Array[10, 15, 3, 4, 5, 20]>\n```\n\n#### index (...x) <span>=> number</span>\n\nGet's index in plain data view of data element specified by coordinates\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**x**|<var>number</var>|coordinates<br /><br />Require N number arguments, where n - dimention of a tensor.|\n\n```js\nconst t = new gm.Tensor('uint8', [2, 3], new Uint8Array([1, 2, 3, 4, 5, 6]));\nt.index(0, 0); // 0\nt.index(0, 1); // 1\nt.index(1, 2); // 5\n```\n\n#### Tensor.assign (data) <span>=> [Tensor](/docs/tensor#Tensor) (self)</span>\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**data**|<var>TypedArray \\| Array</var>||\n\n#### release () <span>=> [Tensor](/docs/tensor#Tensor) (self)</span>\n\nWrite zeros into tensor's data\n\n#### clone () <span>=> [Tensor](/docs/tensor#Tensor) (a shallow copy, new instance)</span>\n\n#### <span>Static</span>  IndexToCoord (shape, index) <span>=> Array.\\<number> (coordinets that maps to the entered index)</span>\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**shape**|<var>Array.\\<number></var>||\n|**index**|<var>number</var>||\n\n#### <span>Static</span>  CoordToIndex (shape, coords) <span>=> number (index that mapped from entered coords)</span>\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**shape**|<var>Array.\\<number></var>||\n|**coords**|<var>Array.\\<number></var>||\n\n#### <span>Static</span>  Malloc (dtype, size) <span>=> [Tensor](/docs/tensor#Tensor)</span>\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**dtype**|<var>string</var>||\n|**size**|<var>number</var>||\n\n#### <span>Static</span>  DefineType (data) <span>=> string</span>\n\nDefine data type of an argument\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**data**|<var>TypedArray \\| Array</var>||\n\n```js\ngm.Tensor.DefineType(new Float32Array()); // float32\n```\n\n#### <span>Static</span>  GetTypedArray (dtype, data) <span>=> TypedArray \\| Array</span>\n\nGenerate TypedArray\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**dtype**|<var>string</var>|data type of view|\n|**data**|<var>TypedArray \\| Array</var>|initial data|\n\n#### <span>Static</span>  GetSize (shape) <span>=> number (Number of elements that described by shape)</span>\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**shape**|<var>Array.\\<number></var>||\n\n"},"__N_SSG":true}