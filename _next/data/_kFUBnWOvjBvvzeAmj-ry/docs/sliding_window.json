{"pageProps":{"id":"sliding_window","data":"## SlidingWindow\n\n###### Description\n\nWe want to keep our algorythms clear, so to prepare a data for another\n algorythm we need a kind of getting data in different view. SlidingWindow is a helper\n in searching objects in an image, putting each window snaphot as a column,\n this makes easier to apply another algorythms that should wokrs with that data.\n\n###### Params\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**tSrc**|<var>[Tensor](/docs/tensor#Tensor)</var>|The source data to be processed.|\n|**windowSize**|<var>number \\| Array.\\<number></var>||\n|**stride?**|<var>number \\| Array.\\<number></var>|window stride.|\n|**strategy?**|<var>number</var>|output shape strategy.<br /> ENUM:<br />   0(default): [WH * WW, N, 4];<br />   1: [N, WH * WW, 4];<br />   2: [1, WH * WW * N, 4];<br />   2: [WH * WW * N, 1, 4];<br /> LEGEND:<br />   WH - window height,<br />   WW - window width,<br />   N - number of possible windows.<br /><br />TODO: Reviw description ([@worldthirteen](https://github.com/worldthirteen), [@apilguk](https://github.com/apilguk))<br />TODO: Review strategy API|\n\n###### Example\n\n```js\n// this operation will output data in next stragtegy:\n // |xyzw|    |xyzqwe|\n // |qwer| -> |yzwwer|\n // |asdf|    |qweasd|\n //           |wersdf|\n // where each column is a one state of sliding window,\n // and each pixel in a row is a one pixel in a sliding window.\n gm.slidingWindowOp(inputImage, 2, 1, 0);\n```\n\n"},"__N_SSG":true}