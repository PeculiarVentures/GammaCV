{"pageProps":{"id":"perspective_projection","data":"## Perspective Projection\n\n###### Description\n\nProjects the input image to the output canvas using transformation matrix.\n Could be used to fix Perspective.\n\n###### Params\n\n| Param | Type | Description |\n| --- | --- | --- |\n|**tSrc**|<var>[Tensor](/docs/tensor#Tensor)</var>|The source image.|\n|**tTransform**|<var>[Tensor](/docs/tensor#Tensor)</var>|[Affine transformation matrix](https://en.wikipedia.org/wiki/Affine_transformation) (3x3) but in in shape [3, 1, 4], where each 4th element is unused.<br /> Such shape is used for more effective access to matrix values in GPU.|\n|**shape**|<var>Array.\\<number></var>|Output shape|\n|**dType?**|<var>string</var>|Output data type, default to input|\n\n###### Example\n\n```js\n// Manual affine transformation matrix\n const tMatrix = new gm.Tensor('float32', [3, 1, 4], new Float32Array([\n   -1, 0.5, 0, 0,\n   0, 1, 0, 0,\n   0, 0, 1, 0,\n ]));\n gm.perspectiveProjection(tSrc, tMatrix, [1000, 1000, 4]);\n```\n```js\n// 4 point perspective transform\n const tMatrix = new gm.Tensor('float32', [3, 1, 4]);\n gm.generateTransformMatrix(\n   new gm.Rect([10, 10, 100, 15, 100, 150, 15, 150]), // Rect on original image to be projected\n   [100, 100], // Output dimensions\n   tMatrix, // Tensor to be filled\n );\n gm.perspectiveProjection(tSrc, tMatrix, [100, 100, 4]);\n```\n\n"},"__N_SSG":true}